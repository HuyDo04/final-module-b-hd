import { getCart, updateCart, removeFromCart } from "../cart/cart";  

export async function fetchCart() {  
    try {  
        const response = await fetch("http://localhost:3000/cart");  
        return await response.json();  
    } catch (error) {  
        console.error("‚ùå L·ªói khi t·∫£i gi·ªè h√†ng:", error);  
        return [];  
    }  
}  

export default async function CartPage() {  
    const cartItems = await fetchCart();  

    if (!cartItems || cartItems.length === 0) {  
        return `<h2 class="text-center mt-4">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!</h2>`;  
    }  

    return `  
        <div class="container mt-4">  
            <h2>Gi·ªè h√†ng c·ªßa b·∫°n</h2>  
            <table class="table">  
                <thead>  
                    <tr>  
                        <th>T√™n s·∫£n ph·∫©m</th>  
                        <th>Gi√°</th>  
                        <th>S·ªë l∆∞·ª£ng</th>  
                        <th>Th√†nh ti·ªÅn</th>  
                        <th>Thao t√°c</th>  
                    </tr>  
                </thead>  
                <tbody>  
                    ${cartItems.map(item => `  
                        <tr data-id="${item.id}">  
                            <td>${item.title}</td>  
                            <td>${item.price.toLocaleString()} $</td>  
                            <td>  
                                <input type="number" class="quantity-input" value="${item.quantity}" min="1">  
                            </td>  
                            <td>${(item.price * item.quantity).toLocaleString()} $</td>  
                            <td>  
                                <button class="btn btn-danger btn-remove">X√≥a</button>  
                            </td>  
                        </tr>  
                    `).join("")}  
                </tbody>  
            </table>  
            <h4 class="text-end">T·ªïng ti·ªÅn: ${cartItems.reduce((total, item) => total + item.price * item.quantity, 0).toLocaleString()} $</h4>  
            <button class="btn btn-primary mt-3" id="checkout-btn">Thanh to√°n</button>  
        </div>  
    `;  
}  

// üõí X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi s·ªë l∆∞·ª£ng v√† x√≥a s·∫£n ph·∫©m  
export function setupCartEvents() {  
    document.querySelectorAll(".quantity-input").forEach(input => {  
        input.addEventListener("change", async function () {  
            const productId = this.closest("tr").dataset.id;  
            await updateCart(productId, parseInt(this.value));  
            location.reload();  
        });  
    });  

    document.querySelectorAll(".btn-remove").forEach(button => {  
        button.addEventListener("click", async function () {  
            const productId = this.closest("tr").dataset.id;  
            await removeFromCart(productId);  
            location.reload();  
        });  
    });  

    // üõí Th√™m s·ª± ki·ªán cho n√∫t "Thanh to√°n"
   const checkoutBtn = document.getElementById("checkout-btn");
if (checkoutBtn) {  // Ki·ªÉm tra n·∫øu n√∫t t·ªìn t·∫°i
    checkoutBtn.addEventListener("click", async () => {
        // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong localStorage  
        localStorage.clear();

        try {
            // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng hi·ªán t·∫°i
            const response = await fetch("http://localhost:3000/cart");
            if (!response.ok) {
                throw new Error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu gi·ªè h√†ng');
            }
            const cartItems = await response.json();

            // X√≥a t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng
            for (const item of cartItems) {
                const deleteResponse = await fetch(`http://localhost:3000/cart/${item.id}`, {
                    method: 'DELETE'
                });
                if (!deleteResponse.ok) {
                    throw new Error(`Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m v·ªõi ID: ${item.id}`);
                }
            }

            // N·∫øu x√≥a th√†nh c√¥ng h·∫øt, hi·ªÉn th·ªã th√¥ng b√°o
            alert('ƒê·∫∑t h√†ng th√†nh c√¥ng!');
            location.reload(); // T·∫£i l·∫°i trang ƒë·ªÉ l√†m m·ªõi gi·ªè h√†ng  
        } catch (error) {
            console.error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n:', error);
            alert('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.');
        }
    });
}
}
